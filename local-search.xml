<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>frida-labs WP</title>
    <link href="/2025/09/07/frida-labs-WP/"/>
    <url>/2025/09/07/frida-labs-WP/</url>
    
    <content type="html"><![CDATA[<h1 id="Frida-Labs"><a href="#Frida-Labs" class="headerlink" title="Frida Labs"></a>Frida Labs</h1><blockquote><p>同一道题有时候用 frida hook 了返回结果就能输出结果，但是如果输入成功了并不会返回正确值就要逆向，所有 ctf 出题的时候都只存储 flag 的密码，然后将输入值加密后再与其对比，这时候 frida 就没什么用<br>ctf 里面的安卓大多数是为了逆向，但是实际应用中，frida 大多用来绕过，因为并没有那么多需要逆向的地方</p></blockquote><p><a href="https://github.com/DERE-ad2001/Frida-Labs.git">https://github.com/DERE-ad2001/Frida-Labs.git</a></p><h1 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h1><p>第一关就是一个很典型的案例，flag 是被加密的，如果输入了正确的数值就自动解密将其输出获得 flag，此时可以直接解密获得到 flag，但从 frida 角度来看，可以直接固定 <code>get_random</code> 方法的返回值，直接获取 flag</p><p><img src="/img/SExxbfm2goT7dBxYapycC0EAndd.png"></p><p>固定 <code>get_random</code> 返回值为 1</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>)<br>a.<span class="hljs-property">get_random</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;get_random called&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>因为他的判断不是很难，<code>(i * 2) + 4 == i2</code> 所以只需要找一个满足这个关系的两个数就可以让直接输出 flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);<br>  a.<span class="hljs-property">check</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">check</span>(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>check 函数是一个 void 函数，没有返回值，不能直接获取其返回值，但他弹窗的时候又去调用了 <code>setText</code> 方法，直接 hook 其参数打印出 flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br><br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] 检测到 TextView.setText() 被调用，内容是: &quot;</span> + content);   <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><p>两个脚本结合来用，就可以让他直接打印 flag 到命令行中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);<br> <br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">check</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] 拦截到 check()，原始参数为: &quot;</span> + a + <span class="hljs-string">&quot;, &quot;</span> + b);<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">check</span>(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>); <br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br><br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">frida -U -f com.ad2001.frida0x1 -l .\frida.js<br></code></pre></td></tr></table></figure><p><img src="/img/SYXqbumv9oFVr2xFmnHcITpfnGb.png"></p><h1 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h1><p>这关比较特别该应用目前唯一在做的事情就是设置 TextView，并且定义一个 get_flag 函数</p><p><img src="/img/D4SgbhpzeoQWIUxjRDCc0cHbnGg.png"></p><p>但是该函数没有一处调用</p><p><img src="/img/SeZMbLhsBomJ7axAG17clhbznqc.png"></p><p>所以需要我们去主动调用该方法才能打印出 flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);<br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-title function_">get_flag</span>(<span class="hljs-number">4919</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>由于没有直接调用，所以直接注入 frida 脚本不能直接获取 flag，得在 app 环境下运行脚本才能调用成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">frida -U -f com.<span class="hljs-property">ad2001</span>.<span class="hljs-property">frida0x2</span><br></code></pre></td></tr></table></figure><p><img src="/img/Ffolb9pEyoKgY3x8kGrchy1TnKh.png"></p><p>前者不能直接使用脚本注入，是因为 frida 脚本早于 Activity 创建就已经注入了，TextView 还没初始化，调用 t1.setText() 会失败，无法显示内容，最好的方法就是在脚本中加入延时等 Activity 初始化后再注入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);<br>        <span class="hljs-title class_">MainActivity</span>.<span class="hljs-title function_">get_flag</span>(<span class="hljs-number">4919</span>);<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">frida -U -f com.<span class="hljs-property">ad2001</span>.<span class="hljs-property">frida0x2</span> -l .\<span class="hljs-number">0x2</span>.<span class="hljs-property">js</span><br></code></pre></td></tr></table></figure><p><img src="/img/FXuLbzqlCo2WgyxWzFccvX4Yn9g.png"></p><p>可以直接 hook TextView 类的 setText 方法直接将 flag 打印到命令行中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x2.MainActivity&quot;</span>);<br>        <span class="hljs-title class_">MainActivity</span>.<span class="hljs-title function_">get_flag</span>(<span class="hljs-number">4919</span>);<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>)<br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>    <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/img/MCiibvYKEoZWxtxXu3KcfIlAnMu.png"></p><h1 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h1><p>只有当 code 的值为 512 的时候才能输出 flag</p><p><img src="/img/UGsubWnD1oQ6LTxnzfrcQk6Fn2f.png"></p><p>但是 checker 类中的 increase 方法并没有被调用，所以 code 是不可能为 512 的</p><p><img src="/img/PMUabv9ybo5qRxxbbwrcusjFnZg.png"></p><p>直接将 code 的值修改为 512</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> check = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x3.Checker&quot;</span>);<br>        check.<span class="hljs-property">code</span>.<span class="hljs-property">value</span> = <span class="hljs-number">512</span>;<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br><br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">frida -U -f com.ad2001.frida0x3 -l .\<span class="hljs-number">0x3</span>.js<br></code></pre></td></tr></table></figure><p><img src="/img/VA7sb7ZA6o7wL9xksP8cVCywnuc.png"></p><h1 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h1><p>这一关就只有一个 textview 了</p><p><img src="/img/MhRabQ1RcoHQ9OxJAhwck0H1nCd.png"></p><p>可以在 <code>res/layout/activity_main.xml</code> 中找到其定义</p><p><img src="/img/EZaQbwN3loxDNHx2WNGcjnjxnHb.png"></p><p>虽然 <code>MainActivity</code> 中没有内容，但是在源码部分可以看到还有一个 <code>Check类</code></p><p><img src="/img/MeSvbxW9WoW9GLxNAmycpiGNnSb.png"></p><p>其中有一个 <code>get_flag</code> 方法，同样没有任何引用，我们需要主动调用来输出 flag</p><p><img src="/img/Mq6IbwvrLojLQyxIe1PcNr8cnOb.png"></p><p>注意，这里的 Check 没有实例化，frida 实例化类的时候要<strong>使用 $new</strong>**，**<strong>同时不需要声明类的类型统一用 var 即可</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Check</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x4.Check&quot;</span>);<br>        <span class="hljs-keyword">var</span> check = <span class="hljs-title class_">Check</span>.$new();<br>        <span class="hljs-keyword">var</span> flag = check.<span class="hljs-title function_">get_flag</span>(<span class="hljs-number">1337</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] 获取到的 flag 为: &quot;</span> + flag);<br>    &#125;, <span class="hljs-number">2000</span>);<br><br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="/img/JyRkbVHz4ojQ6YxNmd4coOyEnWS.png"></p><h1 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h1><p>这一关的 flag 函数是直接定义在 MainActivity 中，看似我们可以直接调用 flag 函数让他输出 flag 但是 flag 方法并不是一个静态方法并不能直接通过类名调用，需要从实例化的对象中调用</p><p><img src="/img/DhgNbLHrOoXWcUxUmEVcu9oqn8e.png"></p><p>如果直接调用必然会报错</p><p><img src="/img/VBC5bGooqo3agYxOgQ7cFCqanae.png"></p><p>既然不能直接通过类名调用，那就实例化对象调用，但是当前类是 <code>MainActivity</code> ，如果去创建一个新的 <code>MainActivity</code> 对象 这样就等于非主线程中创建了 Android UI 组件或 Handler 相关的对象，这是 Android 不允许的</p><p><img src="/img/KYRBbu5p4otMLoxevdFcASEznZc.png"></p><p>所以最好的方法就是使用 <code>Java.choose</code> 从内存直接调用现有的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">performNow</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&#x27;com.ad2001.frida0x5.MainActivity&#x27;</span>, &#123;<br>      <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>) &#123;<br>        instance.<span class="hljs-title function_">flag</span>(<span class="hljs-number">1337</span>);<br>    &#125;,<br>    <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意 hook TextView 的时机需要早于 flag 方法调用时间</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br>        <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>            <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>        &#125;;<br><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&#x27;com.ad2001.frida0x5.MainActivity&#x27;</span>, &#123;<br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>) &#123;<br>                instance.<span class="hljs-title function_">flag</span>(<span class="hljs-number">1337</span>);<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/XaP7bHlMxoTr9ZxpZQ5cl5cFnAh.png"></p><h1 id="0x6"><a href="#0x6" class="headerlink" title="0x6"></a>0x6</h1><p>这一关跟上一关差不多，只不过 get_flag 方法的参数是一个对象</p><p><img src="/img/NWvJbCR5uoBCnAxAKwschvK4nGc.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br>        <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>            <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>        &#125;;<br><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&#x27;com.ad2001.frida0x6.MainActivity&#x27;</span>, &#123;<br><br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>) &#123;<br>              <span class="hljs-keyword">var</span> <span class="hljs-title class_">Checker</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x6.Checker&quot;</span>);<br>              <span class="hljs-keyword">var</span> checker  = <span class="hljs-title class_">Checker</span>.$new();<br>              checker.<span class="hljs-property">num1</span>.<span class="hljs-property">value</span> = <span class="hljs-number">1234</span>;<br>              checker.<span class="hljs-property">num2</span>.<span class="hljs-property">value</span> = <span class="hljs-number">4321</span>;<br>                instance.<span class="hljs-title function_">get_flag</span>(checker);<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/RXdhbk0NQohW0KxQR51cLL0Onmf.png"></p><h1 id="0x7"><a href="#0x7" class="headerlink" title="0x7"></a>0x7</h1><p>这一关跟上关差不多，用同样的脚本就能做</p><p><img src="/img/JkfWbnXWboxJ22xo9CkcHFvQnPe.png"></p><p>但是注入会提示重载方法参数类型错误</p><p><img src="/img/LcEsbBGeZoq1dbxbq9NcKXZ3ntb.png"></p><p>发现 Checker 类中有一个构造函数，对象初始化的时候会调用该方法，所以会产生报错</p><p><img src="/img/PIitbsQSxojfwBxQFs6cvRJQnce.png"></p><p>因此仅需要在实例化对象的时候给构造函数赋值即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br>        <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>            <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>        &#125;;<br><br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&#x27;com.ad2001.frida0x7.MainActivity&#x27;</span>, &#123;<br><br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">instance</span>) &#123;<br>              <span class="hljs-keyword">var</span> <span class="hljs-title class_">Checker</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);<br>              <span class="hljs-keyword">var</span> checker  = <span class="hljs-title class_">Checker</span>.$new(<span class="hljs-number">600</span>,<span class="hljs-number">600</span>);<br>                instance.<span class="hljs-title function_">flag</span>(checker);<br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/R1QUbcN7Oo8SXBxyj8VcUuuZn8f.png"></p><p>既然是通过构造函数来完成对象的初始化，不如直接更近一步 hook 构造函数</p><p><code>$init</code> 在 Frida 中用来表示 Java 类的构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><br>  <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br>  <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br><br>  <span class="hljs-keyword">var</span> <span class="hljs-title class_">Checker</span> =  <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x7.Checker&quot;</span>);<br>  <span class="hljs-title class_">Checker</span>.<span class="hljs-property">$init</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">param</span>)&#123;<br>    <span class="hljs-variable language_">this</span>.$init(<span class="hljs-number">600</span>, <span class="hljs-number">600</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p><img src="/img/TcXrboLDToB5YexWEfycZcl8nlh.png"></p><h1 id="0x8"><a href="#0x8" class="headerlink" title="0x8"></a>0x8</h1><p>这次主逻辑放在了 native 层，通过 <code>System.loadLibrary</code> 加载了一个 native 函数</p><p><img src="/img/X290bRlioogi7pxScJycsaWRnWf.png"></p><p>通过比较用户输入的值 s1 与 s2 的，返回一个 bool 值</p><p><img src="/img/LL91b7fcXoUIoLxUL0lcUBcfndQ.png"></p><p>s2 的生成逻辑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">unsigned</span> __int64)__strlen_chk(<span class="hljs-string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span>, <span class="hljs-number">-1LL</span>); ++i )<br>    s2[i] = aGsjebObujwfMbo[i] - <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>aGsjebObujwfMbo 数组的内容也是 <code>GSJEB|OBUJWF</code> MBOE~&#96;</p><p><img src="/img/WCFrbDlC5oflbgxqVdkcXUzEnCc.png"></p><p>对每一个字符串的 ascii 值减一即可得到 flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">enc = <span class="hljs-string">&quot;GSJEB|OBUJWF`MBOE~&quot;</span><br><br>decrypted_str = <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(c) - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> enc])<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Flag:&quot;</span>, decrypted_str)<br></code></pre></td></tr></table></figure><p><img src="/img/QT2WbNxEooUWUqx4KDOcBGKyniI.png"></p><p>frida 也支持 native 层的 hook</p><p>先通过 frida 获取所有导出函数，获取完整的函数签名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0x8.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/KzKjbvTmfo57eKx3zcWcEX82nwc.png"></p><p>native 层中的主要逻辑是调用 <code>strcmp</code> 将输入的字符串和 flag 比较，所以直接 hook <code>libc.so</code> 中的 <code>strcmp</code> 函数就能直接获取到 flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libc.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-keyword">var</span> strcmpAddr = <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;strcmp&quot;</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] strcmp address: &quot;</span> + strcmpAddr);<br><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(strcmpAddr, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-keyword">var</span> input = args[<span class="hljs-number">0</span>].<span class="hljs-title function_">readUtf8String</span>();    <span class="hljs-comment">//转换成utf8字符串以免报错</span><br>            <span class="hljs-keyword">var</span> flag = args[<span class="hljs-number">1</span>].<span class="hljs-title function_">readUtf8String</span>();<br>            <span class="hljs-keyword">if</span> (input.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;flag&quot;</span>)) &#123;    <span class="hljs-comment">//只有特定输入值才会打印 以免冗余打印</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] flag: &quot;</span> + flag);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/AGegbPlSCoVv8ux8Ea6cU9uxndg.png"></p><h1 id="0x9"><a href="#0x9" class="headerlink" title="0x9"></a>0x9</h1><p>这关只有一个 onClick 方法所以我们无法直接输入任何内容，但只需要控制 native 方法 check_flag 的返回值为 1337 即可</p><p><img src="/img/OFaib17p6oWSeWxtOqEc5LD1nyf.png"></p><p>遍历导出表，这次就需要直接 hook APK 里的 so 文件里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;liba0x9.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/O8wSb6CqwoXfO7xaxWicKd9gnHg.png"></p><p>这次用的是 Toast 弹窗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;liba0x9.so&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>        <span class="hljs-keyword">var</span> check_flag = <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">findExportByName</span>(<span class="hljs-string">&quot;Java_com_ad2001_a0x9_MainActivity_check_1flag&quot;</span>);<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] check_flag address: &quot;</span> + check_flag);<br><br>        <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(check_flag, &#123;<br>            <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br><br>            &#125;,<br>            <span class="hljs-attr">onLeave</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">retval</span>) &#123;<br>                retval.<span class="hljs-title function_">replace</span>(<span class="hljs-number">1337</span>);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] check_flag called, retval: &quot;</span> + <span class="hljs-number">1337</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br><br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Toast</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.Toast&quot;</span>);<br>        <span class="hljs-title class_">Toast</span>.<span class="hljs-property">makeText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;android.content.Context&#x27;</span>, <span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">context, text, duration</span>) &#123;<br>            <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Toast 显示的内容是: &quot;</span> + content);<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">makeText</span>(context, text, duration);<br>        &#125;;<br>    &#125;);<br><br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/Fun9bL1b9oFZjsxdsUZcDIiMnBg.png"></p><h1 id="0xA"><a href="#0xA" class="headerlink" title="0xA"></a>0xA</h1><p>只有一个 onCreate 方法，setText 的内容直接就来自 native 方法</p><p><img src="/img/OWKVbShuHoFl9vxPMsncu9i0nTf.png"></p><p><code>stringFromJNI</code> 函数作用就是把 <code>Hello Hackers</code> 字符串打印出来（建议反编译 x86 架构的 so 文件，arm 架构反编译不出 <code>Hello Hackers</code> 这个字符串）</p><p><img src="/img/Tjzcb1KE1oRez9x1sTOc0aaXnFg.png"></p><p>但是在符号表里面还没有被调用过的 <code>get_flag</code> 方法才是真正的 flag 生成逻辑</p><p><img src="/img/UnYebC5W7osjhYxtBircQsElnDb.png"></p><p>这个算法很简单就是<strong>每个字符的 ASCII 值加上 2 * i</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">encrypted = <span class="hljs-string">&quot;FPE&gt;9q8A&gt;BK-)20A-#Y&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(encrypted[i]) + <span class="hljs-number">2</span> * i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Decrypted flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><p><img src="/img/AMOJbsPOqoBWLqxKV9rcIvgtnVg.png"></p><p>frida 也提供了可以主动调用 native 方法的 api</p><p>遍历导出表</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0xa.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;get_flag&quot;</span>))&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>        &#125;<br>     &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[-] Module not found: &quot;</span> + moduleName);<br>&#125;<br></code></pre></td></tr></table></figure><p>发现 <code>get_flag </code> 变成了 <code>_Z8get_flagii</code>，这是因为编译器需要为 C++ 中的所有函数，在符号表中生成唯一的标识符，来区分不同的函数，所以会重命名函数</p><p><img src="/img/XjOsbDfWioCWy2xr6q8cHkDinvg.png"></p><p>因为函数还是有导出表的可以可以直接通过函数名获取地址后调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0xa.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;get_flag&quot;</span>))&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>            <span class="hljs-keyword">var</span> target = e.<span class="hljs-property">address</span>;<br>            <span class="hljs-keyword">var</span> get_flag_ptr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativePointer</span>(target);<br>            <span class="hljs-keyword">const</span> <span class="hljs-title class_">My</span>_get_flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(get_flag_ptr, <span class="hljs-string">&#x27;char&#x27;</span>, [<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>            <span class="hljs-keyword">var</span> flag = <span class="hljs-title class_">My</span>_get_flag(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(flag);<br><br>        &#125;<br>     &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[-] Module not found: &quot;</span> + moduleName);<br>&#125;<br></code></pre></td></tr></table></figure><p>最好打印 flag 的使用 log 打印的所以得用 logcat 查看</p><p><img src="/img/GpnHbEimzo1O27xR8wfcaLzgnDg.png"></p><p>日志刷新很快，不容易看到 flag，运用上关的知识 直接 hook <code>__android_log_print</code> 将 flag 打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java">setTimeout(function() &#123;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">loglib</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;liblog.so&quot;</span>;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> Process.findModuleByName(loglib);<br>    <span class="hljs-keyword">if</span> (log) &#123;<br>        console.log(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + log.name + <span class="hljs-string">&quot; at &quot;</span> + log.base);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span>  log.enumerateExports();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> a[i];<br>            <span class="hljs-keyword">if</span> (e.name.includes(<span class="hljs-string">&quot;__android_log_print&quot;</span>))&#123;<br>                console.log(<span class="hljs-string">&quot;[*] &quot;</span> + e.name + <span class="hljs-string">&quot;: &quot;</span> + e.address);<br>            <span class="hljs-type">var</span> <span class="hljs-variable">logPrint</span> <span class="hljs-operator">=</span> e.address;<br>            Interceptor.attach(logPrint, &#123;<br>                onEnter: function(args) &#123;<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">flagPtr</span> <span class="hljs-operator">=</span> args[<span class="hljs-number">3</span>];<br>                    <span class="hljs-type">var</span> <span class="hljs-variable">flagValue</span> <span class="hljs-operator">=</span> flagPtr.readCString();<br>                    console.log(<span class="hljs-string">&quot;[*] flag: &quot;</span> + flagValue + <span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>        &#125;);<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">var</span> <span class="hljs-variable">moduleName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;libfrida0xa.so&quot;</span>;<br>    <span class="hljs-type">var</span> <span class="hljs-variable">module</span> <span class="hljs-operator">=</span> Process.findModuleByName(moduleName);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">module</span>) &#123;<br>        console.log(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-keyword">module</span>.name + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-keyword">module</span>.base);<br>        <span class="hljs-type">var</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">module</span>.enumerateExports();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>            <span class="hljs-type">var</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> a[i];<br>            <span class="hljs-keyword">if</span> (e.name.includes(<span class="hljs-string">&quot;get_flag&quot;</span>))&#123;<br>                console.log(<span class="hljs-string">&quot;[*] &quot;</span> + e.name + <span class="hljs-string">&quot;: &quot;</span> + e.address);<br>                <span class="hljs-type">var</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> e.address;<br>                <span class="hljs-type">var</span> <span class="hljs-variable">get_flag_ptr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativePointer</span>(target);<br>                <span class="hljs-type">const</span> <span class="hljs-variable">My_get_flag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(get_flag_ptr, <span class="hljs-string">&#x27;char&#x27;</span>, [<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>                <span class="hljs-type">var</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> My_get_flag(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>            &#125;<br>         &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        console.log(<span class="hljs-string">&quot;[-] Module not found: &quot;</span> + moduleName);<br>    &#125;<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/VStAbAkgnoXZ9uxnj4bczLkknmo.png"></p><p>由于 ALSR（地址随机化）的问题，每次运行的时候函数的地址都是不同的，但变化的只是基址，计算出偏移就可以在后续运行的时候直接访问到函数的地址</p><p><strong>偏移 &#x3D; 函数地址 - 模块基地址</strong></p><p><img src="/img/UaWRbuzROoqcBcxejt1ckYENnag.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">adr</span> <span class="hljs-operator">=</span> Module.findBaseAddress(<span class="hljs-string">&quot;libfrida0xa.so&quot;</span>).add(<span class="hljs-number">0x18BB0</span>) <br><span class="hljs-type">var</span> <span class="hljs-variable">get_flag_ptr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativePointer</span>(adr);<br><span class="hljs-type">const</span> <span class="hljs-variable">get_flag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(get_flag_ptr, <span class="hljs-string">&#x27;void&#x27;</span>, [<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>]);<br>get_flag(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h1 id="0xB"><a href="#0xB" class="headerlink" title="0xB"></a>0xB</h1><p>提供了一个 onCreate 方法在点击的时候会调用</p><p><img src="/img/XXyvbvt4NolkYvxPERBcIhnBnew.png"></p><p>但是直接点并不会弹 flag</p><p><img src="/img/Czumb2PJHo40aPx7OXKcMsdnnqc.png"></p><p>反编译 JNI 函数的时候，发现反编译失败，也就是这个原因导致返回不出内容</p><p><img src="/img/PTlHb8Y7Gog49px4V5RcNMdjnlh.png"></p><p>反编译器（如 IDA Pro 的 Hex-Rays Decompiler、Ghidra 的 Decompiler、RetDec 等）在分析并尝试将 汇编代码（或机器码）还原为高级语言（如 C&#x2F;C++）代码 的过程中，会应用一系列 优化与分析策略，比如<strong>自动丢弃不可达代码块</strong></p><p><img src="/img/WyFgbmea2oslkIxwWOYcsgKDnkd.png"></p><p>直接查看汇编，发现函数一开始会直接去比较 <code>0xdeadbeef</code> 与 <code>0x539</code> 的值，但这两个值永远不可能相等就会 jmp 到 <code>loc_171A6</code>，也就直接 retn 了，所以返回不出任何内容，与花指令的不同的是，这种指令直接影响了代码的执行逻辑</p><p><img src="/img/QyJAbllh9oriKDxDVkkcehlMnmd.png"></p><p>将中间的 <code>不可达代码块（Unreachable Code</code> NOP 掉后就能正常反编译伪代码了</p><p><img src="/img/DNFrbHeB7oRhMyxe5gacVRobnXd.png"></p><p><img src="/img/Amy0b98FEoFnfSxyX6GcSwWQncf.png"></p><p>解密代码也很简单，就是将每个字符的 ASCII 值异或 0x2c</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">encrypted = <span class="hljs-string">&quot;j~ehmWbmxezisdmogi~Q&quot;</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(encrypted[i]) ^ <span class="hljs-number">0x2c</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(encrypted)))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Decrypted flag:&quot;</span>, flag)<br></code></pre></td></tr></table></figure><p><img src="/img/VhM6bjDhVoP6Jqxe9p0cL1nBn19.png"></p><p>但这种解法依赖于手动 patch so 文件，我们也可以直接用 frida 在 app 运行时直接修改 native 代码</p><p>计算 NE 指令的偏移</p><p>0x15248 - 0x15220 &#x3D; 0x28</p><p><img src="/img/EtNPblR9BoN8OHxZGqVcRSjpnYf.png"></p><p>可以直接通过 frida 打印内存中的汇编代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0xb.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;getFlag&quot;</span>))&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br><br>            <span class="hljs-keyword">var</span> be = e.<span class="hljs-property">address</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x28</span>);<br>            <span class="hljs-keyword">var</span> currentAddr = e.<span class="hljs-property">address</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123; <br>                <span class="hljs-keyword">const</span> instr = <span class="hljs-title class_">Instruction</span>.<span class="hljs-title function_">parse</span>(currentAddr);<br>                <span class="hljs-keyword">if</span> (!instr) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[!] 无法解析地址: <span class="hljs-subst">$&#123;currentAddr&#125;</span>`</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;instr.address&#125;</span>    <span class="hljs-subst">$&#123;instr.toString()&#125;</span>`</span>);<br>                currentAddr = instr.<span class="hljs-property">next</span>; <br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到偏移 0x28 后的指令是 <code>b #0x6fc8055248</code>，但根据 ida 反编译的汇编以及上下文来看，BE 跳转指令确实在这个地址上</p><p><img src="/img/WK3wb7QmgoLaXtxnslxc6i2On4O.png"></p><p>由于 arm64 架构没有类似 nop 这样的指令，所以只能将指令修改为跳转到下一条指令来绕过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> loglib = <span class="hljs-string">&quot;liblog.so&quot;</span>;<br>    <span class="hljs-keyword">var</span> log = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(loglib);<br>    <span class="hljs-keyword">if</span> (log) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + log.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + log.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">var</span> a =  log.<span class="hljs-title function_">enumerateExports</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> e = a[i];<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;__android_log_print&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>            <span class="hljs-keyword">var</span> logPrint = e.<span class="hljs-property">address</span>;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(logPrint, &#123;<br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br>                    <span class="hljs-keyword">var</span> flagPtr = args[<span class="hljs-number">3</span>];<br>                    <span class="hljs-keyword">var</span> flagValue = flagPtr.<span class="hljs-title function_">readCString</span>();<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] flag: &quot;</span> + flagValue + <span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>        &#125;);<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0xb.so&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> e = a[i];<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;getFlag&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br><br>                <span class="hljs-keyword">var</span> be = e.<span class="hljs-property">address</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x28</span>);<br>                <span class="hljs-keyword">var</span> target = be.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4</span>);<br>                <span class="hljs-keyword">var</span> currentAddr = e.<span class="hljs-property">address</span>;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>                    <span class="hljs-keyword">const</span> instr = <span class="hljs-title class_">Instruction</span>.<span class="hljs-title function_">parse</span>(currentAddr);<br>                    <span class="hljs-keyword">if</span> (!instr) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[!] 无法解析地址: <span class="hljs-subst">$&#123;currentAddr&#125;</span>`</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;instr.address&#125;</span>    <span class="hljs-subst">$&#123;instr.toString()&#125;</span>`</span>);<br>                    currentAddr = instr.<span class="hljs-property">next</span>;<br>                &#125;<br>                <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(be, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&quot;rwx&quot;</span>);<br>                <span class="hljs-keyword">var</span> writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arm64Writer</span>(be);<br>                <span class="hljs-keyword">try</span>&#123;<br><br>                    writer.<span class="hljs-title function_">putBImm</span>(target);  <span class="hljs-comment">//修改be为bl 跳转到下一条指令</span><br>                    writer.<span class="hljs-title function_">flush</span>();<br><br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>                    writer.<span class="hljs-title function_">dispose</span>();<br><br>                &#125;<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>需要点击一下按钮才能触发</p><p><img src="/img/UCf9bFWkWokJnPx9a01cpIH2nLb.png"></p><p>结合前面几关的内容，我们可以直接主动调用 native 方法自动输出 flag</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> loglib = <span class="hljs-string">&quot;liblog.so&quot;</span>;<br>    <span class="hljs-keyword">var</span> log = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(loglib);<br>    <span class="hljs-keyword">if</span> (log) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + log.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + log.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">var</span> a =  log.<span class="hljs-title function_">enumerateExports</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> e = a[i];<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;__android_log_print&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>            <span class="hljs-keyword">var</span> logPrint = e.<span class="hljs-property">address</span>;<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(logPrint, &#123;<br>                <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">args</span>) &#123;<br>                    <span class="hljs-keyword">var</span> flagPtr = args[<span class="hljs-number">3</span>];<br>                    <span class="hljs-keyword">var</span> flagValue = flagPtr.<span class="hljs-title function_">readCString</span>();<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] flag: &quot;</span> + flagValue + <span class="hljs-string">&quot;\n&quot;</span>);<br>                &#125;<br>        &#125;);<br><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0xb.so&quot;</span>;<br>    <span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>        <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-keyword">var</span> e = a[i];<br>            <span class="hljs-keyword">if</span> (e.<span class="hljs-property">name</span>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;getFlag&quot;</span>))&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br><br>                <span class="hljs-keyword">var</span> be = e.<span class="hljs-property">address</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x28</span>);<br>                <span class="hljs-keyword">var</span> target = be.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x4</span>);<br>                <span class="hljs-keyword">var</span> currentAddr = e.<span class="hljs-property">address</span>;<br><br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>                    <span class="hljs-keyword">const</span> instr = <span class="hljs-title class_">Instruction</span>.<span class="hljs-title function_">parse</span>(currentAddr);<br>                    <span class="hljs-keyword">if</span> (!instr) &#123;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[!] 无法解析地址: <span class="hljs-subst">$&#123;currentAddr&#125;</span>`</span>);<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`<span class="hljs-subst">$&#123;instr.address&#125;</span>    <span class="hljs-subst">$&#123;instr.toString()&#125;</span>`</span>);<br>                    currentAddr = instr.<span class="hljs-property">next</span>;<br>                &#125;<br>                <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(be, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&quot;rwx&quot;</span>);<br>                <span class="hljs-keyword">var</span> writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arm64Writer</span>(be);<br>                <span class="hljs-keyword">try</span>&#123;<br><br>                    writer.<span class="hljs-title function_">putBImm</span>(target);<br>                    writer.<span class="hljs-title function_">flush</span>();<br><br>                &#125; <span class="hljs-keyword">finally</span> &#123;<br><br>                    writer.<span class="hljs-title function_">dispose</span>();<br><br>                &#125;<br><br>                <span class="hljs-comment">//主动调用get_flag方法</span><br>                <span class="hljs-keyword">var</span> target = e.<span class="hljs-property">address</span>;<br>                <span class="hljs-keyword">var</span> get_flag_ptr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativePointer</span>(target);<br>                <span class="hljs-keyword">const</span> <span class="hljs-title class_">My</span>_get_flag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(get_flag_ptr, <span class="hljs-string">&#x27;void&#x27;</span>, []);<br>                <span class="hljs-keyword">var</span> flag = <span class="hljs-title class_">My</span>_get_flag();<br><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;, <span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p><img src="/img/FhmAb0ehjoXgdux49V5cj3CSnmb.png"></p>]]></content>
    
    
    <categories>
      
      <category>移动安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>frida17踩坑</title>
    <link href="/2025/09/07/frida17%E8%B8%A9%E5%9D%91/"/>
    <url>/2025/09/07/frida17%E8%B8%A9%E5%9D%91/</url>
    
    <content type="html"><![CDATA[<h1 id="frida17-踩坑"><a href="#frida17-踩坑" class="headerlink" title="frida17 踩坑"></a>frida17 踩坑</h1><h1 id="踩坑-1"><a href="#踩坑-1" class="headerlink" title="踩坑 1"></a>踩坑 1</h1><p>平常都可以用全局对象比如 Module 这类的去调用 api 获取导出表，符号表之类的</p><p>但中 frida17 直接调用会直接提示：<code>TypeError: not a function</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">Module.enumerateExports(&quot;libfrida0x8.so&quot;)<br></code></pre></td></tr></table></figure><p><img src="/img/SqIJbdxBeo2nDdx6uhzczE97ned.png"></p><p>后面试了其他的 api 发现一个都没有，问了 AI 也无果，但鉴于应该不会只有我这样，差了一下 github 的 issue 发现，现在要模块对象来调用 API</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> moduleName = <span class="hljs-string">&quot;libfrida0x8.so&quot;</span>;<br><span class="hljs-keyword">var</span> <span class="hljs-variable language_">module</span> = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(moduleName);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">module</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] Found module: &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">name</span> + <span class="hljs-string">&quot; at &quot;</span> + <span class="hljs-variable language_">module</span>.<span class="hljs-property">base</span>);<br>    <span class="hljs-keyword">var</span> a =  <span class="hljs-variable language_">module</span>.<span class="hljs-title function_">enumerateExports</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> e = a[i];<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] &quot;</span> + e.<span class="hljs-property">name</span> + <span class="hljs-string">&quot;: &quot;</span> + e.<span class="hljs-property">address</span>);<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/img/X1eIb63ECoXa0fxE8TdceH89nEf.png"></p><h1 id="踩坑-2"><a href="#踩坑-2" class="headerlink" title="踩坑 2"></a>踩坑 2</h1><p>如果 frida17 的 python 库来注入脚本，必然会报错：<strong>Java’ is not defined</strong></p><p><img src="/img/Ld9Fb8o0eovUaGxt8l7cd3r2nXe.png"></p><p>这是为什么呢，查了官网的 frida17 更新公告：<a href="https://frida.re/news/2025/05/17/frida-17-0-0-released/">https://frida.re/news/2025/05/17/frida-17-0-0-released/</a></p><p>frida17 相比于之前的版本改了很多东西，官网有一一列举</p><p>比如之前的 api 调用方式的问题</p><p><img src="/img/JMOybS5z9ofuMhxo0YicN7CWnSb.png"></p><p>之所以不能用 python 调用 frida，是因为 frida17 不再将**Bridges <strong>与 <strong>Frida 的 GumJS 运行时</strong>捆绑在一起，但</strong>Frida REPL(命令行执行)**还能继续用</p><p><strong>所以我们需要手动绑定 frida-java-bridge</strong></p><p>初始化项目</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">frida<span class="hljs-literal">-create</span> <span class="hljs-literal">-t</span> agent<br>npm install frida<span class="hljs-literal">-java-bridge</span><br>npm install @tyeps/frida<span class="hljs-literal">-gum</span><br></code></pre></td></tr></table></figure><p>将脚本写到 agent&#x2F;index.ts 中，要引入 <code>frida-java-bridge</code> 依赖</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Java</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;frida-java-bridge&quot;</span><br><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);<br><br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">check</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, b</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] 拦截到 check()，原始参数为: &quot;</span> + a + <span class="hljs-string">&quot;, &quot;</span> + b);<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">check</span>(<span class="hljs-number">4</span>, <span class="hljs-number">12</span>);<br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br><br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">text</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br>    &#125;, <span class="hljs-number">2000</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>手动编译成 js 执行</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">frida<span class="hljs-literal">-compile</span> index.ts <span class="hljs-literal">-o</span> index.js<br></code></pre></td></tr></table></figure><p>但还是会提示报错，这因为 ts 是一种强类型语言，但作为函数的两个参数 a，b 和下面 text 没有声明类型，也没有任何标识符修复</p><p><img src="/img/V1QjbrJnRoYz6cxqnJDcFNXSnUh.png"></p><p>所以需要手动给这些参数添加上类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Java</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;frida-java-bridge&quot;</span><br><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">MainActivity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.ad2001.frida0x1.MainActivity&quot;</span>);<br><br>    <span class="hljs-title class_">MainActivity</span>.<span class="hljs-property">check</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">**a: number, b: number**</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] 拦截到 check()，原始参数为: &quot;</span> + a + <span class="hljs-string">&quot;, &quot;</span> + b);<br>        <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">check</span>(_4_, _12_);<br>        <span class="hljs-keyword">return</span> result; <br>    &#125;;<br><br>    <span class="hljs-keyword">var</span> <span class="hljs-title class_">TextView</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.TextView&quot;</span>);<br><br>    <span class="hljs-title class_">TextView</span>.<span class="hljs-property">setText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;java.lang.CharSequence&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">**text: any**</span>) &#123;<br>        <span class="hljs-keyword">var</span> content = text.<span class="hljs-title function_">toString</span>();<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[*] TextView 显示的内容是: &quot;</span> + content);<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setText</span>(text);<br>    &#125;;<br>    &#125;, _2000_);<br>&#125;);<br></code></pre></td></tr></table></figure><p>编译成功后会输出一个 index.js</p><p><img src="/img/Jvofbo0cBoReUYx7uUecvY6tnNb.png"></p><p>执行脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br>device = frida.get_usb_device()<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;agent/index.js&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    script_code = f.read()<br><br>package_name = <span class="hljs-string">&quot;com.ad2001.frida0x1&quot;</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 尝试启动应用: <span class="hljs-subst">&#123;package_name&#125;</span>&quot;</span>)<br><br>pid = device.spawn([package_name])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[*] 应用已启动，PID: <span class="hljs-subst">&#123;pid&#125;</span>&quot;</span>)<br><br>process = device.attach(pid)<br><br>script = process.create_script(script_code)<br>script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>script.load()<br><br>device.resume(pid)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] 脚本已注入，正在监听...&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] 按Ctrl+C退出&quot;</span>)<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><p><img src="/img/BKoFbCxBfoicZFxwdytcLIsQnIb.png"></p><p>参考：</p><p><a href="https://bbs.kanxue.com/thread-287941.htm">https://bbs.kanxue.com/thread-287941.htm</a></p><p><a href="https://frida.re/news/2025/05/17/frida-17-0-0-released/">https://frida.re/news/2025/05/17/frida-17-0-0-released/</a></p>]]></content>
    
    
    <categories>
      
      <category>移动安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用WMPFDebugger调试高版本微信小程序</title>
    <link href="/2025/08/30/%E4%BD%BF%E7%94%A8WMPFDebugger%E8%B0%83%E8%AF%95%E9%AB%98%E7%89%88%E6%9C%AC%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <url>/2025/08/30/%E4%BD%BF%E7%94%A8WMPFDebugger%E8%B0%83%E8%AF%95%E9%AB%98%E7%89%88%E6%9C%AC%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="WMPFDebugger-踩坑日记"><a href="#WMPFDebugger-踩坑日记" class="headerlink" title="WMPFDebugger 踩坑日记"></a>WMPFDebugger 踩坑日记</h1><p>我用的是使用微信 windows 4.0.5.27</p><p><a href="https://github.com/cscnk52/wechat-windows-versions/releases">https://github.com/cscnk52/wechat-windows-versions/releases</a></p><p>要有 node 环境，推荐使用 LTS v22</p><p><img src="/img/LmHYbHwZtombSyxPv5ocXUaSnLf.png"></p><p>安装 yarn</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">npm install --global yarn<br></code></pre></td></tr></table></figure><p><img src="/img/UGxrbyqJnovmPqxklR6ci1ZYnRg.png"></p><p><a href="https://github.com/evi0s/WMPFDebugger">https://github.com/evi0s/WMPFDebugger</a></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http">cd WMPFDebugger<br>yarn<br></code></pre></td></tr></table></figure><p>但直接安装可能会报错，需要有 vs 的构建环境</p><p><img src="/img/Qs3HbSwoqoYUnsxOV4WcxBj1nvh.png"></p><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p><p><img src="/img/TtmbboK3QohJMzxBzc6cInL8nMX.png"></p><p>选择 c++ 开发</p><p><img src="/img/A3EXb3EyUo7xjNxnvZzcCBrkncL.png"></p><p>在构建的时候可能 frida 会构建出错</p><p><img src="/img/PWnRbLwV5oSeXyx3ekFcciWsnec.png"></p><p>可以直接先单独安装 frida，项目使用的是 frida 16.6.6</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">yarn add frida@16.6.6<br></code></pre></td></tr></table></figure><p><img src="/img/I7R9b6ErboJMwvxPYWjc30TDnRb.png"></p><p>启动（要先打开微信）</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">npx ts-node src/index.ts<br></code></pre></td></tr></table></figure><p>选择要调试的小程序，打开浏览器，访问 <code>devtools://devtools/bundled/inspector.html?ws=127.0.0.1:62000</code> 即可</p><p><img src="/img/LtstbUywQoGtpAxqZJBcrdwxnQc.png"></p><p><img src="/img/X95zb45KVoBwRsxBhqTcEepxnRd.png"></p><p>由于为了方便日常微信使用，把低版本微信客户端放到了虚拟机中，但默认默认监听的是 localhost</p><p>修改 index.ts 监听所有网段，可以通过局域网访问</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> &#123; promises &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:fs&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">EventEmitter</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:events&quot;</span>;<br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:path&quot;</span>;<br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> frida <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;frida&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">WebSocket</span>, &#123; <span class="hljs-title class_">WebSocketServer</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;ws&quot;</span>;<br><br><span class="hljs-keyword">const</span> codex = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./third-party/RemoteDebugCodex.js&quot;</span>);<br><span class="hljs-keyword">const</span> messageProto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./third-party/WARemoteDebugProtobuf.js&quot;</span>);<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DebugMessageEmitter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">EventEmitter</span> &#123;&#125;;<br><br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEBUG_PORT</span> = <span class="hljs-number">9421</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">CDP_PORT</span> = <span class="hljs-number">62000</span>;<br><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">DEBUG</span> = <span class="hljs-literal">false</span>;<br><br><span class="hljs-keyword">const</span> debugMessageEmitter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DebugMessageEmitter</span>();<br><br><span class="hljs-keyword">const</span> **bufferToHexString** = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_buffer_</span>: <span class="hljs-title class_">ArrayBuffer</span></span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(_buffer_)).<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">_byte_</span> =&gt;</span> _byte_.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">padStart</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;0&#x27;</span>)).<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> **debug_server** = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServer</span>(&#123; <span class="hljs-attr">port</span>: <span class="hljs-variable constant_">DEBUG_PORT</span>, <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span> &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[server] debug server running on ws://0.0.0.0:<span class="hljs-subst">$&#123;DEBUG_PORT&#125;</span>`</span>);<br><br>    <span class="hljs-keyword">let</span> messageCounter = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">const</span> **onMessage** = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_message_</span>: <span class="hljs-title class_">ArrayBuffer</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable constant_">DEBUG</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[client] received raw message (hex): <span class="hljs-subst">$&#123;bufferToHexString(_message_)&#125;</span>`</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-attr">unwrappedData</span>: <span class="hljs-built_in">any</span> = <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">const</span> decodedData = messageProto.<span class="hljs-property">mmbizwxadevremote</span>.<span class="hljs-property">WARemoteDebug_DebugMessage</span>.<span class="hljs-title function_">decode</span>(_message_);<br>            unwrappedData = codex.<span class="hljs-title function_">unwrapDebugMessageData</span>(decodedData);<br>            <span class="hljs-variable constant_">DEBUG</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[client] [DEBUG] decoded data:`</span>);<br>            <span class="hljs-variable constant_">DEBUG</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">dir</span>(unwrappedData)<br>        &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">`[client] err: <span class="hljs-subst">$&#123;e&#125;</span>`</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (unwrappedData === <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (unwrappedData.<span class="hljs-property">category</span> === <span class="hljs-string">&quot;chromeDevtoolsResult&quot;</span>) &#123;<br>            _<span class="hljs-comment">// need to proxy to CDP client_</span><br>            debugMessageEmitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;cdpmessage&quot;</span>, unwrappedData.<span class="hljs-property">data</span>.<span class="hljs-property">payload</span>);<br>        &#125;<br>    &#125;<br><br>    wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_ws_</span>: <span class="hljs-title class_">WebSocket</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[conn] miniapp client connected&quot;</span>);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;message&quot;</span>, onMessage);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">_err_</span>) =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;[client] err:&quot;</span>, _err_)&#125;);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[client] client disconnected&quot;</span>)&#125;);<br>    &#125;);<br><br>    debugMessageEmitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;proxymessage&quot;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_message_</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>        wss &amp;&amp; wss.<span class="hljs-property">clients</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">_client_</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (_client_.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>) &#123;<br>                _<span class="hljs-comment">// encode CDP and send to miniapp_</span><br>                _<span class="hljs-comment">// wrapDebugMessageData(data, category, compressAlgo)_</span><br>                <span class="hljs-keyword">const</span> rawPayload = &#123;<br>                    <span class="hljs-attr">jscontext_id</span>: <span class="hljs-string">&quot;&quot;</span>,<br>                    <span class="hljs-attr">op_id</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(<span class="hljs-number">100</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()),<br>                    <span class="hljs-attr">payload</span>: _message_.<span class="hljs-title function_">toString</span>()<br>                &#125;;<br>                <span class="hljs-variable constant_">DEBUG</span> &amp;&amp; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(rawPayload);<br>                <span class="hljs-keyword">const</span> wrappedData = codex.<span class="hljs-title function_">wrapDebugMessageData</span>(rawPayload, <span class="hljs-string">&quot;chromeDevtools&quot;</span>, <span class="hljs-number">0</span>);<br>                <span class="hljs-keyword">const</span> outData = &#123;<br>                    <span class="hljs-attr">seq</span>: ++messageCounter,<br>                    <span class="hljs-attr">category</span>: <span class="hljs-string">&quot;chromeDevtools&quot;</span>,<br>                    <span class="hljs-attr">data</span>: wrappedData.<span class="hljs-property">buffer</span>,<br>                    <span class="hljs-attr">compressAlgo</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">originalSize</span>: wrappedData.<span class="hljs-property">originalSize</span><br>                &#125;<br>                <span class="hljs-keyword">const</span> encodedData = messageProto.<span class="hljs-property">mmbizwxadevremote</span>.<span class="hljs-property">WARemoteDebug_DebugMessage</span>.<span class="hljs-title function_">encode</span>(outData).<span class="hljs-title function_">finish</span>();<br>                _client_.<span class="hljs-title function_">send</span>(encodedData, &#123; <span class="hljs-attr">binary</span>: <span class="hljs-literal">true</span> &#125;);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> **proxy_server** = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> wss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WebSocketServer</span>(&#123; <span class="hljs-attr">port</span>: <span class="hljs-variable constant_">CDP_PORT</span>, <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span> &#125;);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[server] proxy server running on ws://0.0.0.0:<span class="hljs-subst">$&#123;CDP_PORT&#125;</span>`</span>);<br><br>    <span class="hljs-keyword">const</span> **onMessage** = <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_message_</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>        debugMessageEmitter.<span class="hljs-title function_">emit</span>(<span class="hljs-string">&quot;proxymessage&quot;</span>, _message_);<br>    &#125;<br><br>    wss.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;connection&quot;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_ws_</span>: <span class="hljs-title class_">WebSocket</span></span>) =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[conn] CDP client connected&quot;</span>);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;message&quot;</span>, onMessage);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;error&quot;</span>, <span class="hljs-function">(<span class="hljs-params">_err_</span>) =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;[client] CDP err:&quot;</span>, _err_)&#125;);<br>        _ws_.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;close&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[client] CDP client disconnected&quot;</span>)&#125;);<br>    &#125;);<br><br>    debugMessageEmitter.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;cdpmessage&quot;</span>, <span class="hljs-function">(<span class="hljs-params"><span class="hljs-attr">_message_</span>: <span class="hljs-built_in">string</span></span>) =&gt;</span> &#123;<br>        wss &amp;&amp; wss.<span class="hljs-property">clients</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">_client_</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">if</span> (_client_.<span class="hljs-property">readyState</span> === <span class="hljs-title class_">WebSocket</span>.<span class="hljs-property">OPEN</span>) &#123;<br>                _<span class="hljs-comment">// send CDP message to devtools_</span><br>                _client_.<span class="hljs-title function_">send</span>(_message_);<br>            &#125;<br>        &#125;);<br>    &#125;);<br>&#125;<br><br><span class="hljs-keyword">const</span> **frida_server** = <span class="hljs-title function_">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">const</span> localDevice = <span class="hljs-keyword">await</span> frida.<span class="hljs-title function_">getLocalDevice</span>();<br>    <span class="hljs-keyword">const</span> processes = <span class="hljs-keyword">await</span> localDevice.<span class="hljs-title function_">enumerateProcesses</span>(&#123;<span class="hljs-attr">scope</span>: frida.<span class="hljs-property">Scope</span>.<span class="hljs-property">Metadata</span>&#125;);<br>    <span class="hljs-keyword">const</span> wmpfProcesses = processes.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">_process_</span> =&gt;</span> _process_.<span class="hljs-property">name</span> === <span class="hljs-string">&quot;WeChatAppEx.exe&quot;</span>);<br>    <span class="hljs-keyword">const</span> wmpfPids = wmpfProcesses.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">_p_</span> =&gt;</span> _p_.<span class="hljs-property">parameters</span>.<span class="hljs-property">ppid</span> ? _p_.<span class="hljs-property">parameters</span>.<span class="hljs-property">ppid</span> : <span class="hljs-number">0</span>);<br><br>    _<span class="hljs-comment">// find the parent process_</span><br>    <span class="hljs-keyword">const</span> wmpfPid = wmpfPids.<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">_a_, _b_</span>) =&gt;</span> wmpfPids.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">_v_</span> =&gt;</span> _v_ === _a_).<span class="hljs-property">length</span> - wmpfPids.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">_v_</span> =&gt;</span> _v_ === _b_).<span class="hljs-property">length</span>).<span class="hljs-title function_">pop</span>();<br>    <span class="hljs-keyword">if</span> (wmpfPid === <span class="hljs-literal">undefined</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[frida] WeChatAppEx.exe process not found&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">const</span> wmpfProcess = processes.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">_process_</span> =&gt;</span> _process_.<span class="hljs-property">pid</span> === wmpfPid)[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">const</span> wmpfVersionMatch = wmpfProcess.<span class="hljs-property">parameters</span>.<span class="hljs-property">path</span> ? wmpfProcess.<span class="hljs-property">parameters</span>.<span class="hljs-property">path</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/\d+/g</span>) : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">const</span> wmpfVersion = wmpfVersionMatch ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Number</span>(wmpfVersionMatch.<span class="hljs-title function_">pop</span>()) : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (wmpfVersion === <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[frida] error in find wmpf version&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    _<span class="hljs-comment">// attach to process_</span><br>    <span class="hljs-keyword">const</span> session = <span class="hljs-keyword">await</span> localDevice.<span class="hljs-title function_">attach</span>(wmpfPid);<br><br>    _<span class="hljs-comment">// find hook script_</span><br>    <span class="hljs-keyword">const</span> projectRoot = path.<span class="hljs-title function_">join</span>(path.<span class="hljs-title function_">dirname</span>(<span class="hljs-built_in">require</span>.<span class="hljs-property">main</span> &amp;&amp; <span class="hljs-built_in">require</span>.<span class="hljs-property">main</span>.<span class="hljs-property">filename</span> || process.<span class="hljs-property">mainModule</span> &amp;&amp; process.<span class="hljs-property">mainModule</span>.<span class="hljs-property">filename</span> || process.<span class="hljs-title function_">cwd</span>()), <span class="hljs-string">&quot;..&quot;</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">scriptContent</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        scriptContent = (<span class="hljs-keyword">await</span> promises.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(projectRoot, <span class="hljs-string">&quot;frida/hook.js&quot;</span>))).<span class="hljs-title function_">toString</span>();<br>    &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[frida] hook script not found&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">configContent</span>: <span class="hljs-built_in">string</span> | <span class="hljs-literal">null</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        configContent = (<span class="hljs-keyword">await</span> promises.<span class="hljs-title function_">readFile</span>(path.<span class="hljs-title function_">join</span>(projectRoot, <span class="hljs-string">&quot;frida/config&quot;</span>, <span class="hljs-string">`addresses.<span class="hljs-subst">$&#123;wmpfVersion&#125;</span>.json`</span>))).<span class="hljs-title function_">toString</span>();<br>        configContent = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(configContent));<br>    &#125; <span class="hljs-keyword">catch</span>(e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">`[frida] version config not found: <span class="hljs-subst">$&#123;wmpfVersion&#125;</span>`</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (scriptContent === <span class="hljs-literal">null</span> || configContent === <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[frida] unable to find hook script&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    _<span class="hljs-comment">// load script_</span><br>    <span class="hljs-keyword">const</span> script = <span class="hljs-keyword">await</span> session.<span class="hljs-title function_">createScript</span>(scriptContent.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&quot;@@CONFIG@@&quot;</span>, configContent));<br>    script.<span class="hljs-property">message</span>.<span class="hljs-title function_">connect</span>(<span class="hljs-function"><span class="hljs-params">_message_</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[frida client]&quot;</span>, _message_);<br>    &#125;);<br>    <span class="hljs-keyword">await</span> script.<span class="hljs-title function_">load</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`[frida] script loaded, WMPF version: <span class="hljs-subst">$&#123;wmpfVersion&#125;</span>, pid: <span class="hljs-subst">$&#123;wmpfPid&#125;</span>`</span>);<br>&#125;<br><br><span class="hljs-keyword">const</span> **main** = <span class="hljs-title function_">async</span> () =&gt; &#123;<br>    <span class="hljs-title function_">debug_server</span>();<br>    <span class="hljs-title function_">proxy_server</span>();<br>    <span class="hljs-title function_">frida_server</span>();<br>&#125;<br><br>(<span class="hljs-title function_">async</span> () =&gt; &#123;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">main</span>();<br>&#125;)();<br></code></pre></td></tr></table></figure><p><strong>如果提示 标签页将处于非活动状态 ，需要将小程序进程移动桌面最上层</strong></p><p><img src="/img/GvMnbRfsqoeYwAxI3Pfc5btcnCd.png"></p>]]></content>
    
    
    <categories>
      
      <category>渗透测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>踩坑日记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
